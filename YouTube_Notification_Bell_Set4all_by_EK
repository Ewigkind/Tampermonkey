// ==UserScript==
// @name         YouTube Notification Bell Set4all by EK
// @match        https://www.youtube.com/feed/channels
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  Set Bell Notification for all Channels at once. This skripts is adding 3 Bell Icon Buttons to your Youtube Channels Page https://www.youtube.com/feed/channels. (testet on Firefox 115.24.0esr (64-bit) and Vivaldi 5.6.2867.62) date: 05.05.2025
// @run-at       document-idle
// @grant        none
// @author       ChatGPT / Ewigkind.
// @updateURL    https://github.com/Ewigkind/Tampermonkey_Scripts/blob/main/YouTube_Notification_Bell_Set4all_by_EK
// @downloadURL  https://github.com/Ewigkind/Tampermonkey_Scripts/blob/main/YouTube_Notification_Bell_Set4all_by_EK
// ==/UserScript==

(async () => {
    'use strict';

    const wait = ms => new Promise(res => setTimeout(res, ms));

    const containerSelector = 'ytd-section-list-renderer';

    function createBellButton(setting) {
        const btn = document.createElement('button');
        btn.style.fontSize = '20px';
        btn.style.marginRight = '10px';
        btn.style.padding = '8px';
        btn.style.border = 'none';
        btn.style.borderRadius = '6px';
        btn.style.cursor = 'pointer';
        btn.style.color = '#fff';

        switch (setting) {
            case 'all':
                btn.textContent = 'ðŸ””'; // full bell
                btn.style.backgroundColor = '#4CAF50'; // green
                btn.title = 'Set all bells to: All';
                break;
            case 'personalized':
                btn.textContent = 'ðŸ””'; // could use variation if desired
                btn.style.backgroundColor = '#FF9800'; // orange
                btn.title = 'Set all bells to: Personalized';
                break;
            case 'none':
                btn.textContent = 'ðŸ”•'; // muted bell
                btn.style.backgroundColor = '#F44336'; // red
                btn.title = 'Set all bells to: None';
                break;
        }

        btn.onclick = async () => {
            await bulkSetBells(setting);
        };

        return btn;
    }

    function addControlButtons() {
        if (document.getElementById('bulkBellSetterButtons')) return;

        const container = document.querySelector(containerSelector);
        if (!container) return;

        const btnContainer = document.createElement('div');
        btnContainer.id = 'bulkBellSetterButtons';
        btnContainer.style.margin = '10px';
        btnContainer.style.display = 'flex';
        btnContainer.style.gap = '8px';

        ['all', 'personalized', 'none'].forEach(setting => {
            const btn = createBellButton(setting);
            btnContainer.appendChild(btn);
        });

        container.prepend(btnContainer);
    }

    async function bulkSetBells(setting) {
        const subs = document.querySelectorAll('ytd-channel-renderer, ytd-grid-channel-renderer');
        if (!subs.length) {
            alert('No subscriptions found. Please scroll to load more and try again.');
            return;
        }

        for (const sub of subs) {
            try {
                const bellBtn = sub.querySelector('button[aria-label*="notifications"]');
                if (!bellBtn) continue;

                bellBtn.click();
                await wait(500);

                const options = Array.from(document.querySelectorAll('tp-yt-paper-item[role="option"]'));
                const targetOption = options.find(opt => opt.textContent.trim().toLowerCase() === setting);
                if (targetOption) {
                    targetOption.click();
                    console.log(`Set bell to ${setting} for a channel.`);
                    await wait(1000);
                } else {
                    console.log(`Option '${setting}' not found in popup.`);
                }
            } catch (e) {
                console.error('Error processing channel:', e);
            }
        }

        alert(`Finished setting all bells to "${setting}". Reload the page to confirm changes.`);
    }

    const observer = new MutationObserver((mutations, obs) => {
        const container = document.querySelector(containerSelector);
        if (container) {
            addControlButtons();
            obs.disconnect();
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
})();
